from aiogram import F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, PollAnswer
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.util import await_only

from bot.database import Course
from sqlalchemy.orm import selectinload
import random

import math

from bot.client.client import ask_deepseek, get_client

# from bot.db.models import User, Question, QuizAnswer, UserPoll
from bot.database import db_funcs
# from bot.states import UserStates
# from bot.redis_utils import is_quiz_active

from bot.keyboards.keyboards import main_menu, get_courses_page, courses_menu, ai_bot_menu

router: Router = Router()

COURSES_PER_PAGE = 3


@router.message(CommandStart())
async def hello(msg: Message, session: AsyncSession):
    user = await db_funcs.save_user_to_db(
        session=session,
        name=msg.from_user.full_name,
        user_id=msg.from_user.id
    )
    await msg.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!",
        reply_markup=main_menu()
    )


@router.message(F.text == '–ü–æ–º–æ—â—å')
async def help(msg: Message):
    await msg.answer('''–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –±–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∂–µ–Ω—â–∏–Ω–∞–º
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —á–∞—Ç-–±–æ—Ç–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å —Å—Ç—Ä–∞—Ö–∏ –ø–æ –ø–æ–≤–æ–¥—É –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏''')


@router.message(F.text == "–ö—É—Ä—Å—ã")
async def show_courses(msg: Message, session: AsyncSession, state: FSMContext):
    result = await session.execute(select(Course))
    courses = result.scalars().all()
    total_pages = math.ceil(len(courses) / COURSES_PER_PAGE)

    page = 1
    text, _ = await get_courses_page(session, page, courses, COURSES_PER_PAGE, total_pages)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.update_data(page=page, total_pages=total_pages, courses=courses)
    await state.update_data(page=page, total_pages=total_pages)
    await msg.answer(text, reply_markup=courses_menu(page, total_pages))


@router.message(F.text == "<- –ù–∞–∑–∞–¥")
async def prev_page(message: Message, session: AsyncSession, state: FSMContext):
    result = await session.execute(select(Course))
    courses = result.scalars().all()
    data = await state.get_data()
    page = data.get("page", 1)
    total_pages = data.get("total_pages", 3)

    if page > 1:
        page -= 1
        text, _ = await get_courses_page(session, page, courses, COURSES_PER_PAGE, total_pages)
        await state.update_data(page=page)
        await message.answer(text, reply_markup=courses_menu(page, total_pages))

@router.message(F.text == "–í–ø–µ—Ä—ë–¥ ->")
async def prev_page(message: Message, session: AsyncSession, state: FSMContext):
    result = await session.execute(select(Course))
    courses = result.scalars().all()
    data = await state.get_data()
    page = data.get("page", 1)
    total_pages = data.get("total_pages", 3)

    if page < total_pages:
        page += 1
        text, _ = await get_courses_page(session, page, courses, COURSES_PER_PAGE, total_pages)
        await state.update_data(page=page)
        await message.answer(text, reply_markup=courses_menu(page, total_pages))

@router.message(F.text=='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def to_menu(msg: Message):
    await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu())

@router.message(F.text=='–ß–∞—Ç-–±–æ—Ç')
async def ai_chat(msg: Message):
    await msg.answer('–Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —á–∞—Ç-–±–æ—Ç—É.', reply_markup=ai_bot_menu())

@router.message(F.text & ~F.text.in_({"–ö—É—Ä—Å—ã", "–ß–∞—Ç-–±–æ—Ç", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–ü–æ–º–æ—â—å"}))
async def chat_with_ai(msg: Message, session: AsyncSession):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò"""
    user_text = msg.text

    # –æ—Ç–≤–µ—Ç –æ—Ç deepseek
    cl = get_client()
    ai_answer = await ask_deepseek(cl, user_text)

    # –¥–æ—Å—Ç–∞—ë–º –≤—Å–µ –∫—É—Ä—Å—ã
    result = await session.execute(select(Course))
    courses = result.scalars().all()

    if courses:
        if random.random() <= 0.1:
            recommended = random.choice(courses)
            ai_answer += f"\n\nüëâ –°–æ–≤–µ—Ç—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫—É—Ä—Å:\n<b>{recommended.title}</b>\n{recommended.link}"

    await msg.answer(ai_answer, parse_mode="HTML")